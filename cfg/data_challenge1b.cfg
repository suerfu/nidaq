# Rules of config file for Polaris ConfigParser:

# 1) comments start with #.
# 2) parameter name and values cannot contain space.
# 3) directories can be nested and specified with curly brackets { }. The closing bracket must have white space before and after.
# 4) between parameter key and value there should be either colon or equal sign.
# 5) at the end of parameter value, there should be a comma.
# 6) arrays can be passed in: simply use space to separate each values.


module {
    daq { 
        lib : ./lib/libnidaq.so,
        fcn : NIdaq,
        enable : true,
        next : recorder,
    }

    recorder { 
        lib : ./lib/libnidaq.so,
        fcn : HDF5Recorder,
        enable : true,
        next : daq,
    }
}

max_MB_per_file : 5000,

#prefix : /data/data_challenge_1a/Data_Challenge_1b,

facility : 1, # integer

comment : "Data Challenge 1. 4 channels at 1.25 MHz for 5 hour. All channels at GS. A function generator feeds a sine wave to channel 0. Channel 1 and trigger on PFI0 are identical. Channel 2 is left open. CHannel 3 has a termination resistor of 50 ohm. Data taken with Cfg_Default as termination option in driver.",

run_purpose : "Test continuous acquisition at 1.25 MHz, half channels.",

run_type : 0, # integer

adc1 {
    data_mode : trig-int, # cont, # trig-ext trig-int
    trigger_channel : /Dev1/pfi0,
    trigger_period_us : 2000000,
    sample_rate : 1250000, 
    nb_samples  : 12500,

    channel : Dev1/ai0:1 Dev1/ai3 Dev1/ai4 Dev1/ai5,
    Vmin : -2 -10 -10 -1 -1,
    Vmax :  2  10  10  1  1,

    adc_name : ch0 ch1 ch2 ch3,
    connection0 : Gen,
    connection1 : Trig,
    connection3 : NC,
    connection4 : Term50ohm,
    connection5 : Unknown,
}

detconfig1 {
    device_name_list : hello beautiful world,
    tes_bias : 1.0 2.0 3.0,
    squid_bias : 0 1 2,
    preamp_voltage_bias : 3 2 1.,
    phi_bias : 1 1 1.,
    preamp_gain : 10 20 10,
    lock_point : 0 0 0,
    lock_mode : 1 1 2,
    output_offset : 0 0 10,
    output_gain : 10 1 1,
    signal_gen_amplitude : 2 2 10,
    signal_gen_frequency : 100 1000 1000,
    signal_gen_shape : tri squ rec, 
}
